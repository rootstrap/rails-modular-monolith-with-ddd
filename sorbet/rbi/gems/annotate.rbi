# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/annotate/all/annotate.rbi
#
# annotate-3.2.0

module Annotate
  def self.bootstrap_rake; end
  def self.eager_load(options); end
  def self.load_requires(options); end
  def self.load_tasks; end
  def self.set_defaults(options = nil); end
  def self.setup_options(options = nil); end
  def self.version; end
end
module Annotate::Constants
end
module AnnotateModels
  def self.annotate(klass, file, header, options = nil); end
  def self.annotate_model_file(annotated, file, header, options); end
  def self.annotate_one_file(file_name, info_block, position, options = nil); end
  def self.annotate_pattern(options = nil); end
  def self.classified_sort(cols); end
  def self.columns(klass, options); end
  def self.do_annotations(options = nil); end
  def self.expand_glob_into_files(glob); end
  def self.final_index_string(index, max_size); end
  def self.final_index_string_in_markdown(index); end
  def self.format_default(col_name, max_size, col_type, bare_type_allowance, attrs); end
  def self.get_attributes(column, column_type, klass, options); end
  def self.get_col_type(col); end
  def self.get_foreign_key_info(klass, options = nil); end
  def self.get_index_info(klass, options = nil); end
  def self.get_loaded_model(model_path, file); end
  def self.get_loaded_model_by_path(model_path); end
  def self.get_model_class(file); end
  def self.get_model_files(options); end
  def self.get_patterns(options, pattern_types = nil); end
  def self.get_schema_footer_text(_klass, options = nil); end
  def self.get_schema_header_text(klass, options = nil); end
  def self.get_schema_info(klass, header, options = nil); end
  def self.hide_default?(col_type, options); end
  def self.hide_limit?(col_type, options); end
  def self.ignored_translation_table_colums(klass); end
  def self.index_columns_info(index); end
  def self.index_unique_info(index, format = nil); end
  def self.index_using_info(index, format = nil); end
  def self.index_where_info(index, format = nil); end
  def self.list_model_files_from_argument; end
  def self.magic_comments_as_string(content); end
  def self.map_col_type_to_ruby_classes(col_type); end
  def self.matched_types(options); end
  def self.max_schema_info_width(klass, options); end
  def self.mb_chars_ljust(string, length); end
  def self.model_dir; end
  def self.model_dir=(arg0); end
  def self.non_ascii_length(string); end
  def self.options_with_position(options, position_in); end
  def self.parse_options(options = nil); end
  def self.quote(value); end
  def self.remove_annotation_of_file(file_name, options = nil); end
  def self.remove_annotations(options = nil); end
  def self.resolve_filename(filename_template, model_name, table_name); end
  def self.retrieve_indexes_from_table(klass); end
  def self.root_dir; end
  def self.root_dir=(arg0); end
  def self.schema_default(klass, column); end
  def self.skip_subdirectory_model_load; end
  def self.skip_subdirectory_model_load=(arg0); end
  def self.split_model_dir(option_value); end
  def self.translated_columns(klass); end
  def self.width(string); end
  def self.with_comments?(klass, options); end
end
module AnnotateModels::FilePatterns
  def self.factory_files(root_directory); end
  def self.fixture_files(root_directory); end
  def self.generate(root_directory, pattern_type, options); end
  def self.scaffold_files(root_directory); end
  def self.serialize_files(root_directory); end
  def self.test_files(root_directory); end
end
class AnnotateModels::BadModelFileError < LoadError
  def to_s; end
end
module AnnotateRoutes
  def self.annotate_routes(header, content, header_position, options = nil); end
  def self.do_annotations(options = nil); end
  def self.remove_annotations(_options = nil); end
  def self.rewrite_contents(existing_text, new_text); end
  def self.routes_file; end
  def self.routes_file_exist?; end
  def self.strip_on_removal(content, header_position); end
end
module AnnotateRoutes::Helpers
  def self.extract_magic_comments_from_array(content_array); end
  def self.real_content_and_header_position(real_content, header_position); end
  def self.strip_annotations(content); end
end
class AnnotateRoutes::HeaderGenerator
  def comment(row = nil); end
  def content(line, maxs); end
  def format_line_element(elem, maxs, index); end
  def generate; end
  def initialize(options, routes_map); end
  def markdown?; end
  def options; end
  def routes_map; end
  def self.generate(options = nil); end
  def self.new(*arg0); end
  def self.routes_map(options); end
  def timestamp_if_required(time = nil); end
end
class Annotate::Helpers
  def self.fallback(*args); end
  def self.include_models?; end
  def self.include_routes?; end
  def self.reset_options(options); end
  def self.skip_on_migration?; end
  def self.true?(val); end
end
