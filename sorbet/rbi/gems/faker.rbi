# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/faker/all/faker.rbi
#
# faker-2.21.0

module Faker
end
module Faker::Base58
  def self.encode(str); end
end
module Faker::Char
  def self.fix_umlauts(string); end
  def self.prepare(string); end
  def self.romanize_cyrillic(string); end
end
class Faker::UniqueGenerator
  def clear; end
  def exclude(name, arguments, values); end
  def initialize(generator, max_retries); end
  def method_missing(name, *arguments); end
  def respond_to_missing?(method_name, include_private = nil); end
  def self.clear; end
  def self.marked_unique; end
end
class Faker::UniqueGenerator::RetryLimitExceeded < StandardError
end
class Faker::Blockchain
end
class Faker::Blockchain::Aeternity < Faker::Base
  def self.address; end
  def self.contract; end
  def self.oracle; end
  def self.rand_strings(length = nil); end
  def self.transaction; end
end
class Faker::Blockchain::Bitcoin < Faker::Base
  def self.address; end
  def self.address_for(network); end
  def self.testnet_address; end
end
class Faker::Blockchain::Ethereum < Faker::Base
  def self.address; end
end
class Faker::Blockchain::Tezos < Faker::Base
  def self.account; end
  def self.block; end
  def self.contract; end
  def self.encode_tz(prefix, payload_size); end
  def self.operation; end
  def self.public_key; end
  def self.secret_key; end
  def self.signature; end
end
class Faker::Book < Faker::Base
  def self.author; end
  def self.genre; end
  def self.publisher; end
  def self.title; end
end
class Faker::Books
end
class Faker::Books::CultureSeries < Faker::Base
  def self.book; end
  def self.civ; end
  def self.culture_ship; end
  def self.culture_ship_class; end
  def self.culture_ship_class_abv; end
  def self.planet; end
end
class Faker::Books::Dune < Faker::Base
  def self.character; end
  def self.city; end
  def self.planet; end
  def self.quote(legacy_character = nil, character: nil); end
  def self.saying(legacy_source = nil, source: nil); end
  def self.title; end
end
class Faker::Books::Lovecraft < Faker::Base
  def self.deity; end
  def self.fhtagn(legacy_number = nil, number: nil); end
  def self.location; end
  def self.paragraph(legacy_sentence_count = nil, legacy_random_sentences_to_add = nil, sentence_count: nil, random_sentences_to_add: nil); end
  def self.paragraph_by_chars(legacy_characters = nil, characters: nil); end
  def self.paragraphs(legacy_number = nil, number: nil); end
  def self.sentence(legacy_word_count = nil, legacy_random_words_to_add = nil, word_count: nil, random_words_to_add: nil, open_compounds_allowed: nil); end
  def self.sentences(legacy_number = nil, number: nil); end
  def self.tome; end
  def self.word; end
  def self.words(legacy_number = nil, legacy_spaces_allowed = nil, number: nil, spaces_allowed: nil); end
end
class Faker::Books::TheKingkillerChronicle < Faker::Base
  def self.book; end
  def self.character; end
  def self.creature; end
  def self.location; end
end
class Faker::Creature
end
class Faker::Creature::Animal < Faker::Base
  def self.name; end
end
class Faker::Creature::Bird < Faker::Base
  def self.adjective; end
  def self.anatomy; end
  def self.anatomy_past_tense; end
  def self.color; end
  def self.common_family_name; end
  def self.common_name(tax_order = nil); end
  def self.emotional_adjective; end
  def self.geo; end
  def self.implausible_common_name; end
  def self.order; end
  def self.order_with_common_name(tax_order = nil); end
  def self.plausible_common_name; end
  def self.silly_adjective; end
end
class Faker::Creature::Cat < Faker::Base
  def self.breed; end
  def self.name; end
  def self.registry; end
end
class Faker::Creature::Dog < Faker::Base
  def self.age; end
  def self.breed; end
  def self.coat_length; end
  def self.gender; end
  def self.meme_phrase; end
  def self.name; end
  def self.size; end
  def self.sound; end
end
class Faker::Creature::Horse < Faker::Base
  def self.breed; end
  def self.name; end
end
class Faker::Address < Faker::Base
  def self.building_number; end
  def self.city(legacy_options = nil, options: nil); end
  def self.city_prefix; end
  def self.city_suffix; end
  def self.community; end
  def self.country; end
  def self.country_by_code(legacy_code = nil, code: nil); end
  def self.country_code; end
  def self.country_code_long; end
  def self.country_name_to_code(legacy_name = nil, name: nil); end
  def self.full_address; end
  def self.full_address_as_hash(*attrs, **attrs_params); end
  def self.latitude; end
  def self.longitude; end
  def self.mail_box; end
  def self.postcode(legacy_state_abbreviation = nil, state_abbreviation: nil); end
  def self.secondary_address; end
  def self.state; end
  def self.state_abbr; end
  def self.street_address(legacy_include_secondary = nil, include_secondary: nil); end
  def self.street_name; end
  def self.street_suffix; end
  def self.time_zone; end
  def self.zip(legacy_state_abbreviation = nil, state_abbreviation: nil); end
  def self.zip_code(legacy_state_abbreviation = nil, state_abbreviation: nil); end
end
class Faker::Alphanumeric < Faker::Base
  def self.alpha(legacy_number = nil, number: nil); end
  def self.alphanumeric(legacy_number = nil, number: nil, min_alpha: nil, min_numeric: nil); end
end
class Faker::Ancient < Faker::Base
  def self.god; end
  def self.hero; end
  def self.primordial; end
  def self.titan; end
end
class Faker::App < Faker::Base
  def self.author; end
  def self.name; end
  def self.semantic_version(legacy_major = nil, legacy_minor = nil, legacy_patch = nil, major: nil, minor: nil, patch: nil); end
  def self.version; end
end
class Faker::Appliance < Faker::Base
  def self.brand; end
  def self.equipment; end
end
class Faker::Artist < Faker::Base
  def self.name; end
end
class Faker::Avatar < Faker::Base
  def self.image(legacy_slug = nil, legacy_size = nil, legacy_format = nil, legacy_set = nil, legacy_bgset = nil, slug: nil, size: nil, format: nil, set: nil, bgset: nil); end
end
class Faker::Bank < Faker::Base
  def self.account_number(legacy_digits = nil, digits: nil); end
  def self.bsb_number; end
  def self.checksum(num_string); end
  def self.compile_bsb_number; end
  def self.compile_fraction(routing_num); end
  def self.compile_routing_number; end
  def self.iban(legacy_country_code = nil, country_code: nil); end
  def self.iban_checksum(country_code, account); end
  def self.iban_country_code; end
  def self.name; end
  def self.rand_numstring; end
  def self.routing_number; end
  def self.routing_number_with_format; end
  def self.swift_bic; end
  def self.valid_checksum?(routing_number, checksum); end
  def self.valid_routing_number; end
end
class Faker::Barcode < Faker::Base
  def self.ean(length = nil); end
  def self.ean_with_composite_symbology(length = nil); end
  def self.generate_barcode(key); end
  def self.generate_check_digit(odd_sum, even_sum); end
  def self.isbn; end
  def self.ismn; end
  def self.issn; end
  def self.sum_even_odd(fake_num); end
  def self.upc_a; end
  def self.upc_a_with_composite_symbology; end
  def self.upc_e; end
  def self.upc_e_with_composite_symbology; end
end
class Faker::Beer < Faker::Base
  def self.alcohol; end
  def self.blg; end
  def self.hop; end
  def self.ibu; end
  def self.malts; end
  def self.name; end
  def self.style; end
  def self.yeast; end
end
class Faker::Blood < Faker::Base
  def self.group; end
  def self.rh_factor; end
  def self.type; end
end
class Faker::Boolean < Faker::Base
  def self.boolean(legacy_true_ratio = nil, true_ratio: nil); end
end
class Faker::BossaNova < Faker::Base
  def self.artist; end
  def self.song; end
end
class Faker::Business < Faker::Base
  def self.credit_card_expiry_date; end
  def self.credit_card_number; end
  def self.credit_card_type; end
end
class Faker::Camera < Faker::Base
  def self.brand; end
  def self.brand_with_model; end
  def self.model; end
end
class Faker::Cannabis < Faker::Base
  def self.brand; end
  def self.buzzword; end
  def self.cannabinoid; end
  def self.cannabinoid_abbreviation; end
  def self.category; end
  def self.health_benefit; end
  def self.medical_use; end
  def self.strain; end
  def self.terpene; end
  def self.type; end
end
class Faker::ChileRut < Faker::Base
  def self.check_digit; end
  def self.dv; end
  def self.full_rut(legacy_min_rut = nil, legacy_fixed = nil, min_rut: nil, fixed: nil); end
  def self.last_rut; end
  def self.rut(legacy_min_rut = nil, legacy_fixed = nil, min_rut: nil, fixed: nil); end
end
class Faker::ChuckNorris < Faker::Base
  def self.fact; end
end
class Faker::Code < Faker::Base
  def self.asin; end
  def self.ean(legacy_base = nil, base: nil); end
  def self.generate_base10_isbn; end
  def self.generate_base13_ean; end
  def self.generate_base13_isbn; end
  def self.generate_base8_ean; end
  def self.generate_imei; end
  def self.generate_nric_check_alphabet(values, prefix); end
  def self.generate_sin_check_digit(digits); end
  def self.imei; end
  def self.isbn(legacy_base = nil, base: nil); end
  def self.npi; end
  def self.nric(legacy_min_age = nil, legacy_max_age = nil, min_age: nil, max_age: nil); end
  def self.rut; end
  def self.rut_verificator_digit(rut); end
  def self.sin; end
  def self.sum(values); end
end
class Faker::Coffee < Faker::Base
  def self.blend_name; end
  def self.intensifier; end
  def self.notes; end
  def self.origin; end
  def self.search_format(key); end
  def self.variety; end
end
class Faker::Coin < Faker::Base
  def self.flip; end
  def self.name; end
end
class Faker::Color < Faker::Base
  def self.color_name; end
  def self.hex_color; end
  def self.hsl_color; end
  def self.hsla_color; end
  def self.rgb_color; end
  def self.single_rgb_color; end
end
class Faker::Commerce < Faker::Base
  def self.brand; end
  def self.categories(num); end
  def self.color; end
  def self.department(legacy_max = nil, legacy_fixed_amount = nil, max: nil, fixed_amount: nil); end
  def self.material; end
  def self.merge_categories(categories); end
  def self.price(legacy_range = nil, legacy_as_string = nil, range: nil, as_string: nil); end
  def self.product_name; end
  def self.promotion_code(legacy_digits = nil, digits: nil); end
  def self.vendor; end
end
class Faker::Company < Faker::Base
  def self.abn_checksum(abn); end
  def self.australian_business_number; end
  def self.brazilian_company_number(legacy_formatted = nil, formatted: nil); end
  def self.bs; end
  def self.buzzword; end
  def self.catch_phrase; end
  def self.collect_regon_sum(array); end
  def self.czech_organisation_number; end
  def self.duns_number; end
  def self.ein; end
  def self.french_siren_number; end
  def self.french_siret_number; end
  def self.industry; end
  def self.inn_checksum(factor, number); end
  def self.inn_number(region, type); end
  def self.logo; end
  def self.luhn_algorithm(number); end
  def self.mod11(number); end
  def self.name; end
  def self.norwegian_organisation_number; end
  def self.polish_register_of_national_economy(legacy_length = nil, length: nil); end
  def self.polish_taxpayer_identification_number; end
  def self.profession; end
  def self.russian_tax_number(region: nil, type: nil); end
  def self.sic_code; end
  def self.south_african_close_corporation_registration_number; end
  def self.south_african_listed_company_registration_number; end
  def self.south_african_pty_ltd_registration_number; end
  def self.south_african_trust_registration_number; end
  def self.spanish_b_algorithm(value); end
  def self.spanish_cif_control_digit(organization_type, code); end
  def self.spanish_organisation_number(organization_type: nil); end
  def self.suffix; end
  def self.swedish_organisation_number; end
  def self.type; end
  def self.weight_sum(array, weights); end
end
class Faker::Compass < Faker::Base
  def self.abbreviation; end
  def self.azimuth; end
  def self.cardinal; end
  def self.cardinal_abbreviation; end
  def self.cardinal_azimuth; end
  def self.direction; end
  def self.half_wind; end
  def self.half_wind_abbreviation; end
  def self.half_wind_azimuth; end
  def self.ordinal; end
  def self.ordinal_abbreviation; end
  def self.ordinal_azimuth; end
  def self.quarter_wind; end
  def self.quarter_wind_abbreviation; end
  def self.quarter_wind_azimuth; end
end
class Faker::Computer < Faker::Base
  def self.os(platform: nil); end
  def self.platform; end
  def self.stack; end
  def self.type; end
end
class Faker::Construction < Faker::Base
  def self.heavy_equipment; end
  def self.material; end
  def self.role; end
  def self.standard_cost_code; end
  def self.subcontract_category; end
  def self.trade; end
end
class Faker::Cosmere < Faker::Base
  def self.allomancer; end
  def self.aon; end
  def self.feruchemist; end
  def self.herald; end
  def self.knight_radiant; end
  def self.metal; end
  def self.shard; end
  def self.shard_world; end
  def self.spren; end
  def self.surge; end
end
class Faker::Crypto < Faker::Base
  def self.md5; end
  def self.sha1; end
  def self.sha256; end
  def self.sha512; end
end
class Faker::CryptoCoin < Faker::Base
  def self.acronym(legacy_coin = nil, coin: nil); end
  def self.coin_array; end
  def self.coin_hash; end
  def self.coin_name(legacy_coin = nil, coin: nil); end
  def self.url_logo(legacy_coin = nil, coin: nil); end
end
class Faker::Currency < Faker::Base
  def self.code; end
  def self.name; end
  def self.symbol; end
end
class Faker::Date < Faker::Base
  def self.backward(legacy_days = nil, days: nil); end
  def self.between(legacy_from = nil, legacy_to = nil, from:, to:); end
  def self.between_except(legacy_from = nil, legacy_to = nil, legacy_excepted = nil, from:, to:, excepted:); end
  def self.birthday(legacy_min_age = nil, legacy_max_age = nil, min_age: nil, max_age: nil); end
  def self.birthday_date(date, age); end
  def self.forward(legacy_days = nil, days: nil); end
  def self.get_date_object(date); end
  def self.in_date_period(month: nil, year: nil); end
end
class Faker::DcComics < Faker::Base
  def self.hero; end
  def self.heroine; end
  def self.name; end
  def self.title; end
  def self.villain; end
end
class Faker::Demographic < Faker::Base
  def self.demonym; end
  def self.educational_attainment; end
  def self.height(legacy_unit = nil, unit: nil); end
  def self.marital_status; end
  def self.race; end
  def self.sex; end
end
class Faker::Dessert < Faker::Base
  def self.flavor; end
  def self.topping; end
  def self.variety; end
end
class Faker::Device < Faker::Base
  def self.build_number; end
  def self.manufacturer; end
  def self.model_name; end
  def self.platform; end
  def self.serial; end
  def self.version; end
end
class Faker::DrivingLicence < Faker::Base
  def self.british_driving_licence(legacy_last_name = nil, legacy_initials = nil, legacy_gender = nil, legacy_date_of_birth = nil, last_name: nil, initials: nil, gender: nil, date_of_birth: nil); end
  def self.gb_licence_checksum; end
  def self.gb_licence_padding(str, num_chars); end
  def self.gb_licence_year(dob, gender); end
  def self.northern_irish_driving_licence; end
  def self.random_gender; end
  def self.uk_driving_licence(*args); end
  def self.usa_driving_licence(state = nil); end
end
class Faker::InvalidStatePassed < StandardError
  def initialize(msg = nil); end
end
class Faker::Drone < Faker::Base
  def self.battery_capacity; end
  def self.battery_type; end
  def self.battery_voltage; end
  def self.battery_weight; end
  def self.charging_temperature; end
  def self.flight_time; end
  def self.iso; end
  def self.max_altitude; end
  def self.max_angular_velocity; end
  def self.max_ascent_speed; end
  def self.max_charging_power; end
  def self.max_descent_speed; end
  def self.max_flight_distance; end
  def self.max_resolution; end
  def self.max_shutter_speed; end
  def self.max_speed; end
  def self.max_tilt_angle; end
  def self.max_wind_resistance; end
  def self.min_shutter_speed; end
  def self.name; end
  def self.operating_temperature; end
  def self.photo_format; end
  def self.shutter_speed_range; end
  def self.video_format; end
  def self.weight; end
end
class Faker::Educator < Faker::Base
  def self.campus; end
  def self.course; end
  def self.course_name; end
  def self.degree; end
  def self.primary_school; end
  def self.secondary_school; end
  def self.subject; end
  def self.university; end
end
class Faker::ElectricalComponents < Faker::Base
  def self.active; end
  def self.electromechanical; end
  def self.passive; end
end
class Faker::Emotion < Faker::Base
  def self.adjective; end
  def self.noun; end
end
class Faker::Esport < Faker::Base
  def self.event; end
  def self.game; end
  def self.league; end
  def self.player; end
  def self.team; end
end
class Faker::Adjective < Faker::Base
  def self.negative; end
  def self.positive; end
end
class Faker::File < Faker::Base
  def self.dir(legacy_segment_count = nil, legacy_root = nil, legacy_directory_separator = nil, segment_count: nil, root: nil, directory_separator: nil); end
  def self.extension; end
  def self.file_name(legacy_dir = nil, legacy_name = nil, legacy_ext = nil, legacy_directory_separator = nil, dir: nil, name: nil, ext: nil, directory_separator: nil); end
  def self.mime_type; end
end
class Faker::Fillmurray < Faker::Base
  def self.image(legacy_grayscale = nil, legacy_width = nil, legacy_height = nil, grayscale: nil, width: nil, height: nil); end
end
class Faker::Finance < Faker::Base
  def self.credit_card(*types); end
  def self.stock_market; end
  def self.ticker(*markets); end
  def self.vat_number(legacy_country = nil, country: nil); end
  def self.vat_number_keys; end
end
class Faker::Food < Faker::Base
  def self.description; end
  def self.dish; end
  def self.ethnic_category; end
  def self.fruits; end
  def self.ingredient; end
  def self.measurement; end
  def self.metric_measurement; end
  def self.spice; end
  def self.vegetables; end
end
class Faker::FunnyName < Faker::Base
  def self.four_word_name; end
  def self.name; end
  def self.name_with_initial; end
  def self.three_word_name; end
  def self.two_word_name; end
end
class Faker::Gender < Faker::Base
  def self.binary_type; end
  def self.short_binary_type; end
  def self.type; end
end
class Faker::GreekPhilosophers < Faker::Base
  def self.name; end
  def self.quote; end
end
class Faker::Hacker < Faker::Base
  def self.abbreviation; end
  def self.adjective; end
  def self.ingverb; end
  def self.noun; end
  def self.phrases; end
  def self.say_something_smart; end
  def self.verb; end
end
class Faker::Hipster < Faker::Base
  def self.paragraph(legacy_sentence_count = nil, legacy_supplemental = nil, legacy_random_sentences_to_add = nil, sentence_count: nil, supplemental: nil, random_sentences_to_add: nil); end
  def self.paragraph_by_chars(legacy_characters = nil, legacy_supplemental = nil, characters: nil, supplemental: nil); end
  def self.paragraphs(legacy_number = nil, legacy_supplemental = nil, number: nil, supplemental: nil); end
  def self.sentence(legacy_word_count = nil, legacy_supplemental = nil, legacy_random_words_to_add = nil, word_count: nil, supplemental: nil, random_words_to_add: nil, open_compounds_allowed: nil); end
  def self.sentences(legacy_number = nil, legacy_supplemental = nil, number: nil, supplemental: nil); end
  def self.word; end
  def self.words(legacy_number = nil, legacy_supplemental = nil, legacy_spaces_allowed = nil, number: nil, supplemental: nil, spaces_allowed: nil); end
end
class Faker::Hobby < Faker::Base
  def self.activity; end
end
class Faker::House < Faker::Base
  def self.furniture; end
  def self.room; end
end
class Faker::IDNumber < Faker::Base
  def self._translate(key); end
  def self.brazilian_citizen_number(legacy_formatted = nil, formatted: nil); end
  def self.brazilian_citizen_number_checksum_digit(digits); end
  def self.brazilian_citizen_number_digit(remainder); end
  def self.brazilian_cpf(legacy_formatted = nil, formatted: nil); end
  def self.brazilian_document_checksum(digits); end
  def self.brazilian_document_digit(checksum, id: nil); end
  def self.brazilian_id(legacy_formatted = nil, formatted: nil); end
  def self.brazilian_id_checksum_digit(digits); end
  def self.brazilian_id_digit(remainder); end
  def self.brazilian_rg(legacy_formatted = nil, formatted: nil); end
  def self.chilean_id; end
  def self.chilean_verification_code(digits); end
  def self.croatian_id(international: nil); end
  def self.croatian_id_checksum_digit(digits); end
  def self.invalid; end
  def self.invalid_south_african_id_number; end
  def self.south_african_id_checksum_digit(id_number); end
  def self.south_african_id_number; end
  def self.spanish_citizen_number; end
  def self.spanish_foreign_citizen_number; end
  def self.ssn_valid; end
  def self.valid; end
  def self.valid_south_african_id_number; end
end
class Faker::IndustrySegments < Faker::Base
  def self.industry; end
  def self.sector; end
  def self.sub_sector; end
  def self.super_sector; end
end
class Faker::Internet < Faker::Base
  def self.base64(length: nil, padding: nil, urlsafe: nil); end
  def self.construct_email(local_part, domain_name); end
  def self.device_token; end
  def self.domain_name(legacy_subdomain = nil, subdomain: nil, domain: nil); end
  def self.domain_suffix; end
  def self.domain_word; end
  def self.email(legacy_name = nil, legacy_separators = nil, name: nil, separators: nil, domain: nil); end
  def self.fix_umlauts(legacy_string = nil, string: nil); end
  def self.free_email(legacy_name = nil, name: nil); end
  def self.ip_v4_address; end
  def self.ip_v4_cidr; end
  def self.ip_v6_address; end
  def self.ip_v6_cidr; end
  def self.mac_address(legacy_prefix = nil, prefix: nil); end
  def self.password(legacy_min_length = nil, legacy_max_length = nil, legacy_mix_case = nil, legacy_special_characters = nil, min_length: nil, max_length: nil, mix_case: nil, special_characters: nil); end
  def self.private_ip_v4_address; end
  def self.private_net_checker; end
  def self.private_nets_regex; end
  def self.public_ip_v4_address; end
  def self.reserved_net_checker; end
  def self.reserved_nets_regex; end
  def self.safe_email(legacy_name = nil, name: nil); end
  def self.sanitize_email_local_part(local_part); end
  def self.slug(legacy_words = nil, legacy_glue = nil, words: nil, glue: nil); end
  def self.url(legacy_host = nil, legacy_path = nil, legacy_scheme = nil, host: nil, path: nil, scheme: nil); end
  def self.user(*args); end
  def self.user_agent(legacy_vendor = nil, vendor: nil); end
  def self.user_name(legacy_specifier = nil, legacy_separators = nil, specifier: nil, separators: nil); end
  def self.username(legacy_specifier = nil, legacy_separators = nil, specifier: nil, separators: nil); end
  def self.uuid; end
end
class Faker::Internet::HTTP < Faker::Base
  def self.status_code(group: nil); end
end
class Faker::Invoice < Faker::Base
  def self.amount_between(legacy_from = nil, legacy_to = nil, from: nil, to: nil); end
  def self.calculate_weighted_sum(base, weight_factors); end
  def self.creditor_reference(legacy_ref = nil, ref: nil); end
  def self.iban_checksum(country_code, account); end
  def self.kidmod10(base); end
  def self.method_731(base); end
  def self.mod10_remainder(number); end
  def self.reference(legacy_ref = nil, ref: nil); end
end
class Faker::Job < Faker::Base
  def self.field; end
  def self.key_skill; end
  def self.position; end
  def self.title; end
end
class Faker::Json < Faker::Base
  def self.add_depth_to_json(legacy_json = nil, legacy_width = nil, legacy_options = nil, json: nil, width: nil, options: nil); end
  def self.add_hash(key_array, hash, width, options); end
  def self.add_hash_to_bottom(hash, key_array, width, options); end
  def self.build_keys_from_array(key_array); end
  def self.build_shallow_hash(width, options); end
  def self.shallow_json(legacy_width = nil, legacy_options = nil, width: nil, options: nil); end
end
class Faker::Kpop < Faker::Base
  def self.boy_bands; end
  def self.girl_groups; end
  def self.i_groups; end
  def self.ii_groups; end
  def self.iii_groups; end
  def self.solo; end
end
class Faker::Lorem < Faker::Base
  def self.character; end
  def self.characters(legacy_number = nil, number: nil, min_alpha: nil, min_numeric: nil); end
  def self.locale_period; end
  def self.locale_question_mark; end
  def self.locale_space; end
  def self.multibyte; end
  def self.paragraph(legacy_sentence_count = nil, legacy_supplemental = nil, legacy_random_sentences_to_add = nil, sentence_count: nil, supplemental: nil, random_sentences_to_add: nil); end
  def self.paragraph_by_chars(legacy_number = nil, legacy_supplemental = nil, number: nil, supplemental: nil); end
  def self.paragraphs(legacy_number = nil, legacy_supplemental = nil, number: nil, supplemental: nil); end
  def self.question(legacy_word_count = nil, legacy_supplemental = nil, legacy_random_words_to_add = nil, word_count: nil, supplemental: nil, random_words_to_add: nil); end
  def self.questions(legacy_number = nil, legacy_supplemental = nil, number: nil, supplemental: nil); end
  def self.sentence(legacy_word_count = nil, legacy_supplemental = nil, legacy_random_words_to_add = nil, word_count: nil, supplemental: nil, random_words_to_add: nil); end
  def self.sentences(legacy_number = nil, legacy_supplemental = nil, number: nil, supplemental: nil); end
  def self.word; end
  def self.words(legacy_number = nil, legacy_supplemental = nil, number: nil, supplemental: nil); end
end
class Faker::LoremFlickr < Faker::Base
  def self.build_url(size, format, search_terms, match_all); end
  def self.colorized_image(legacy_size = nil, legacy_color = nil, legacy_search_terms = nil, legacy_match_all = nil, size: nil, color: nil, search_terms: nil, match_all: nil); end
  def self.grayscale_image(legacy_size = nil, legacy_search_terms = nil, legacy_match_all = nil, size: nil, search_terms: nil, match_all: nil); end
  def self.image(legacy_size = nil, legacy_search_terms = nil, legacy_match_all = nil, size: nil, search_terms: nil, match_all: nil); end
  def self.pixelated_image(legacy_size = nil, legacy_search_terms = nil, legacy_match_all = nil, size: nil, search_terms: nil, match_all: nil); end
end
class Faker::LoremPixel < Faker::Base
  def self.image(legacy_size = nil, legacy_is_gray = nil, legacy_category = nil, legacy_number = nil, legacy_text = nil, legacy_secure = nil, size: nil, is_gray: nil, category: nil, number: nil, text: nil, secure: nil); end
end
class Faker::Markdown < Faker::Base
  def self.available_methods; end
  def self.block_code; end
  def self.emphasis; end
  def self.headers; end
  def self.inline_code; end
  def self.ordered_list; end
  def self.random(*args); end
  def self.sandwich(legacy_sentences = nil, legacy_repeat = nil, sentences: nil, repeat: nil); end
  def self.table; end
  def self.unordered_list; end
end
class Faker::Marketing < Faker::Base
  def self.buzzwords; end
end
class Faker::Measurement < Faker::Base
  def self.check_for_plural(text, number); end
  def self.define_measurement_locale(amount, locale); end
  def self.ensure_valid_amount(amount); end
  def self.height(legacy_amount = nil, amount: nil); end
  def self.length(legacy_amount = nil, amount: nil); end
  def self.make_plural(text); end
  def self.metric_height(legacy_amount = nil, amount: nil); end
  def self.metric_length(legacy_amount = nil, amount: nil); end
  def self.metric_volume(legacy_amount = nil, amount: nil); end
  def self.metric_weight(legacy_amount = nil, amount: nil); end
  def self.volume(legacy_amount = nil, amount: nil); end
  def self.weight(legacy_amount = nil, amount: nil); end
end
class Faker::Military < Faker::Base
  def self.air_force_rank; end
  def self.army_rank; end
  def self.coast_guard_rank; end
  def self.dod_paygrade; end
  def self.marines_rank; end
  def self.navy_rank; end
  def self.space_force_rank; end
end
class Faker::Mountain < Faker::Base
  def self.name; end
  def self.range; end
end
class Faker::Name < Faker::Base
  def self.female_first_name; end
  def self.feminine_name; end
  def self.first_name; end
  def self.first_name_men; end
  def self.first_name_neutral; end
  def self.first_name_women; end
  def self.gender_neutral_first_name; end
  def self.initials(legacy_number = nil, number: nil); end
  def self.last_name; end
  def self.male_first_name; end
  def self.masculine_name; end
  def self.middle_name; end
  def self.name; end
  def self.name_with_middle; end
  def self.neutral_first_name; end
  def self.prefix; end
  def self.suffix; end
end
class Faker::Nation < Faker::Base
  def self.capital_city; end
  def self.flag; end
  def self.language; end
  def self.national_sport; end
  def self.nationality; end
end
class Faker::NatoPhoneticAlphabet < Faker::Base
  def self.code_word; end
end
class Faker::NationalHealthService < Faker::Base
  def self.british_number; end
  def self.check_digit(legacy_number = nil, number: nil); end
end
class Faker::Number < Faker::Base
  def self.between(legacy_from = nil, legacy_to = nil, from: nil, to: nil); end
  def self.binary(digits: nil); end
  def self.decimal(legacy_l_digits = nil, legacy_r_digits = nil, l_digits: nil, r_digits: nil); end
  def self.decimal_part(legacy_digits = nil, digits: nil); end
  def self.digit; end
  def self.generate(count); end
  def self.greater_than_zero(number); end
  def self.hexadecimal(legacy_digits = nil, digits: nil); end
  def self.leading_zero_number(legacy_digits = nil, digits: nil); end
  def self.less_than_zero(number); end
  def self.negative(legacy_from = nil, legacy_to = nil, from: nil, to: nil); end
  def self.non_zero_digit; end
  def self.normal(legacy_mean = nil, legacy_standard_deviation = nil, mean: nil, standard_deviation: nil); end
  def self.number(legacy_digits = nil, digits: nil); end
  def self.positive(legacy_from = nil, legacy_to = nil, from: nil, to: nil); end
  def self.should_be(number, method_to_compare); end
  def self.within(legacy_range = nil, range: nil); end
end
class Faker::Omniauth < Faker::Base
  def email; end
  def first_name; end
  def initialize(name: nil, email: nil); end
  def last_name; end
  def name; end
  def self.apple(name: nil, email: nil, uid: nil); end
  def self.auth0(name: nil, email: nil, uid: nil); end
  def self.city_state; end
  def self.facebook(legacy_name = nil, legacy_email = nil, legacy_username = nil, legacy_uid = nil, name: nil, email: nil, username: nil, uid: nil); end
  def self.gender; end
  def self.github(legacy_name = nil, legacy_email = nil, legacy_uid = nil, name: nil, email: nil, uid: nil); end
  def self.google(legacy_name = nil, legacy_email = nil, legacy_uid = nil, name: nil, email: nil, uid: nil); end
  def self.image; end
  def self.linkedin(legacy_name = nil, legacy_email = nil, legacy_uid = nil, name: nil, email: nil, uid: nil); end
  def self.random_boolean; end
  def self.random_number_from_range(range); end
  def self.timezone; end
  def self.twitter(legacy_name = nil, legacy_nickname = nil, legacy_uid = nil, name: nil, nickname: nil, uid: nil); end
end
class Faker::PhoneNumber < Faker::Base
  def self.area_code; end
  def self.cell_phone; end
  def self.cell_phone_in_e164; end
  def self.cell_phone_with_country_code; end
  def self.country_code; end
  def self.exchange_code; end
  def self.extension(legacy_length = nil, length: nil); end
  def self.phone_number; end
  def self.phone_number_with_country_code; end
  def self.subscriber_number(legacy_length = nil, length: nil); end
end
class Faker::Placeholdit < Faker::Base
  def self.generate_color; end
  def self.image(legacy_size = nil, legacy_format = nil, legacy_background_color = nil, legacy_text_color = nil, legacy_text = nil, size: nil, format: nil, background_color: nil, text_color: nil, text: nil); end
end
class Faker::ProgrammingLanguage < Faker::Base
  def self.creator; end
  def self.name; end
end
class Faker::Relationship < Faker::Base
  def self.familial(legacy_connection = nil, connection: nil); end
  def self.in_law; end
  def self.parent; end
  def self.sibling; end
  def self.spouse; end
end
module Faker::Religion
end
class Faker::Restaurant < Faker::Base
  def self.description; end
  def self.name; end
  def self.review; end
  def self.type; end
end
class Faker::Science < Faker::Base
  def self.element; end
  def self.element_state; end
  def self.element_subcategory; end
  def self.element_symbol; end
  def self.modifier; end
  def self.science(*branches); end
  def self.scientist; end
  def self.tool(simple: nil); end
end
class Faker::SlackEmoji < Faker::Base
  def self.activity; end
  def self.celebration; end
  def self.custom; end
  def self.emoji; end
  def self.food_and_drink; end
  def self.nature; end
  def self.objects_and_symbols; end
  def self.people; end
  def self.travel_and_places; end
end
class Faker::Source < Faker::Base
  def self.hello_world(legacy_lang = nil, lang: nil); end
  def self.print(legacy_str = nil, legacy_lang = nil, str: nil, lang: nil); end
  def self.print_1_to_10(legacy_lang = nil, lang: nil); end
end
class Faker::SouthAfrica < Faker::Base
  def self.cell_phone; end
  def self.close_corporation_registration_number; end
  def self.id_number; end
  def self.invalid_id_number; end
  def self.listed_company_registration_number; end
  def self.phone_number; end
  def self.pty_ltd_registration_number; end
  def self.trust_registration_number; end
  def self.valid_id_number; end
  def self.vat_number; end
end
class Faker::Space < Faker::Base
  def self.agency; end
  def self.agency_abv; end
  def self.company; end
  def self.constellation; end
  def self.distance_measurement; end
  def self.galaxy; end
  def self.launch_vehicle; end
  def self.meteorite; end
  def self.moon; end
  def self.nasa_space_craft; end
  def self.nebula; end
  def self.planet; end
  def self.star; end
  def self.star_cluster; end
end
class Faker::String < Faker::Base
  def self.char_space_ratio; end
  def self.random(legacy_length = nil, length: nil); end
  def self.select_a(length); end
  def self.space_or_utf8_char(ratio); end
  def self.utf8character; end
  def self.utf8string(length); end
end
class Faker::Stripe < Faker::Base
  def self.ccv(legacy_card_type = nil, card_type: nil); end
  def self.invalid_card(legacy_card_error = nil, card_error: nil); end
  def self.month; end
  def self.valid_card(legacy_card_type = nil, card_type: nil); end
  def self.valid_token(legacy_card_type = nil, card_type: nil); end
  def self.year; end
end
class Faker::Subscription < Faker::Base
  def self.payment_method; end
  def self.payment_term; end
  def self.plan; end
  def self.status; end
  def self.subscription_term; end
end
class Faker::Superhero < Faker::Base
  def self.descriptor; end
  def self.name; end
  def self.power; end
  def self.prefix; end
  def self.suffix; end
end
class Faker::Tea < Faker::Base
  def self.type; end
  def self.variety(type: nil); end
end
class Faker::Team < Faker::Base
  def self.creature; end
  def self.mascot; end
  def self.name; end
  def self.sport; end
  def self.state; end
end
class Faker::Time < Faker::Base
  def self.backward(legacy_days = nil, legacy_period = nil, legacy_format = nil, days: nil, period: nil, format: nil); end
  def self.between(legacy_from = nil, legacy_to = nil, legacy_format = nil, from:, to:, format: nil); end
  def self.between_dates(legacy_from = nil, legacy_to = nil, legacy_period = nil, legacy_format = nil, from:, to:, period: nil, format: nil); end
  def self.date_with_random_time(date, period); end
  def self.forward(legacy_days = nil, legacy_period = nil, legacy_format = nil, days: nil, period: nil, format: nil); end
  def self.get_time_object(time); end
  def self.hours(period); end
  def self.minutes; end
  def self.seconds; end
  def self.time_with_format(time, format); end
end
class Faker::Twitter < Faker::Base
  def self.created_at; end
  def self.id; end
  def self.photo_entity; end
  def self.screen_name; end
  def self.status(legacy_include_user = nil, legacy_include_photo = nil, include_user: nil, include_photo: nil); end
  def self.status_entities(legacy_include_photo = nil, include_photo: nil); end
  def self.user(legacy_include_status = nil, legacy_include_email = nil, include_status: nil, include_email: nil); end
  def self.user_entities; end
  def self.utc_offset; end
end
class Faker::Types < Faker::Base
  def self.character; end
  def self.complex_rb_hash(legacy_number = nil, number: nil); end
  def self.random_complex_type; end
  def self.random_type; end
  def self.rb_array(legacy_len = nil, len: nil); end
  def self.rb_hash(legacy_number = nil, legacy_type = nil, number: nil, type: nil); end
  def self.rb_integer(legacy_from = nil, legacy_to = nil, from: nil, to: nil); end
  def self.rb_string(legacy_words = nil, words: nil); end
  def self.titleize(word); end
end
class Faker::University < Faker::Base
  def self.greek_alphabet; end
  def self.greek_organization; end
  def self.name; end
  def self.prefix; end
  def self.suffix; end
end
class Faker::Vehicle < Faker::Base
  def self.calculate_vin_check_digit(vin); end
  def self.car_options; end
  def self.car_type; end
  def self.color; end
  def self.door_count; end
  def self.doors; end
  def self.drive_type; end
  def self.engine; end
  def self.engine_size; end
  def self.first_eight(number); end
  def self.fuel_type; end
  def self.kilometrage(legacy_min = nil, legacy_max = nil, min: nil, max: nil); end
  def self.last_eight(number); end
  def self.license_plate(legacy_state_abreviation = nil, state_abbreviation: nil); end
  def self.make; end
  def self.make_and_model; end
  def self.manufacture; end
  def self.mileage(legacy_min = nil, legacy_max = nil, min: nil, max: nil); end
  def self.model(legacy_make_of_model = nil, make_of_model: nil); end
  def self.singapore_checksum(plate_number); end
  def self.singapore_license_plate; end
  def self.standard_specs; end
  def self.style; end
  def self.transmission; end
  def self.vin; end
  def self.vin_char_to_number(char); end
  def self.year; end
end
class Faker::Verb < Faker::Base
  def self.base; end
  def self.ing_form; end
  def self.past; end
  def self.past_participle; end
  def self.simple_present; end
end
class Faker::WorldCup < Faker::Base
  def self.city; end
  def self.group(legacy_group = nil, group: nil); end
  def self.roster(legacy_country = nil, legacy_type = nil, country: nil, type: nil); end
  def self.stadium; end
  def self.team; end
end
class Faker::Fantasy
end
class Faker::Fantasy::Tolkien < Faker::Base
  def self.character; end
  def self.location; end
  def self.poem; end
  def self.race; end
end
class Faker::Games
end
class Faker::Games::ClashOfClans < Faker::Base
  def self.defensive_building; end
  def self.rank; end
  def self.troop; end
end
class Faker::Games::Control < Faker::Base
  def self.altered_item; end
  def self.altered_world_event; end
  def self.character; end
  def self.hiss; end
  def self.location; end
  def self.object_of_power; end
  def self.quote; end
  def self.the_board; end
end
class Faker::Games::DnD < Faker::Base
  def self.alignment; end
  def self.background; end
  def self.city; end
  def self.klass; end
  def self.language; end
  def self.melee_weapon; end
  def self.monster; end
  def self.race; end
  def self.ranged_weapon; end
  def self.species; end
end
class Faker::Games::Dota < Faker::Base
  def self.building; end
  def self.hero; end
  def self.item; end
  def self.player; end
  def self.quote(legacy_hero = nil, hero: nil); end
  def self.team; end
end
class Faker::Games::ElderScrolls < Faker::Base
  def self.city; end
  def self.creature; end
  def self.dragon; end
  def self.first_name; end
  def self.jewelry; end
  def self.last_name; end
  def self.name; end
  def self.race; end
  def self.region; end
  def self.weapon; end
end
class Faker::Games::Fallout < Faker::Base
  def self.character; end
  def self.faction; end
  def self.location; end
  def self.quote; end
end
class Faker::Game < Faker::Base
  def self.genre; end
  def self.platform; end
  def self.title; end
end
class Faker::Games::HalfLife < Faker::Base
  def self.character; end
  def self.enemy; end
  def self.location; end
end
class Faker::Games::Heroes < Faker::Base
  def self.artifact; end
  def self.klass; end
  def self.name; end
  def self.specialty; end
end
class Faker::Games::HeroesOfTheStorm < Faker::Base
  def self.battleground; end
  def self.class; end
  def self.class_name; end
  def self.hero; end
  def self.quote; end
end
class Faker::Games::LeagueOfLegends < Faker::Base
  def self.champion; end
  def self.location; end
  def self.masteries; end
  def self.quote; end
  def self.rank; end
  def self.summoner_spell; end
end
class Faker::Games::Minecraft < Faker::Base
  def self.achievement; end
  def self.biome; end
  def self.block; end
  def self.enchantment; end
  def self.game_mode; end
  def self.item; end
  def self.mob; end
  def self.status_effect; end
end
class Faker::Games::Myst < Faker::Base
  def self.age; end
  def self.character; end
  def self.creature; end
  def self.game; end
  def self.quote; end
end
class Faker::Games::Overwatch < Faker::Base
  def self.hero; end
  def self.location; end
  def self.quote; end
end
class Faker::Games::Pokemon < Faker::Base
  def self.location; end
  def self.move; end
  def self.name; end
end
class Faker::Games::SonicTheHedgehog < Faker::Base
  def self.character; end
  def self.game; end
  def self.zone; end
end
class Faker::Games::StreetFighter < Faker::Base
  def self.character; end
  def self.move; end
  def self.quote; end
  def self.stage; end
end
class Faker::Games::SuperMario < Faker::Base
  def self.character; end
  def self.game; end
  def self.location; end
end
class Faker::Games::SuperSmashBros < Faker::Base
  def self.fighter; end
  def self.stage; end
end
class Faker::Games::Touhou < Faker::Base
  def self.character; end
  def self.game; end
  def self.location; end
  def self.song; end
  def self.spell_card; end
end
class Faker::Games::WarhammerFantasy < Faker::Base
  def self.creature; end
  def self.faction; end
  def self.hero; end
  def self.location; end
  def self.quote; end
end
class Faker::Games::Witcher < Faker::Base
  def self.book; end
  def self.character; end
  def self.location; end
  def self.monster; end
  def self.potion; end
  def self.quote; end
  def self.school; end
  def self.sign; end
  def self.witcher; end
end
class Faker::Games::WorldOfWarcraft < Faker::Base
  def self.class_name; end
  def self.hero; end
  def self.quote; end
  def self.race; end
end
class Faker::Games::Zelda < Faker::Base
  def self.character; end
  def self.game; end
  def self.item; end
  def self.location; end
end
class Faker::JapaneseMedia
end
class Faker::JapaneseMedia::Conan < Faker::Base
  def self.character; end
  def self.gadget; end
  def self.vehicle; end
end
class Faker::JapaneseMedia::Doraemon < Faker::Base
  def self.character; end
  def self.gadget; end
  def self.location; end
end
class Faker::JapaneseMedia::DragonBall < Faker::Base
  def self.character; end
  def self.planet; end
  def self.race; end
end
class Faker::JapaneseMedia::FmaBrotherhood < Faker::Base
  def self.character; end
  def self.city; end
  def self.country; end
end
class Faker::JapaneseMedia::KamenRider < Faker::Base
  def self.collectible_device(*eras); end
  def self.eras; end
  def self.eras=(new_eras); end
  def self.from_eras(*input_eras, field:); end
  def self.kamen_rider(*eras); end
  def self.series(*eras); end
  def self.transformation_device(*eras); end
  def self.user(*eras); end
end
class InvalidName___Class_0x00___UnavailableInEra_42 < StandardError
end
class Faker::JapaneseMedia::Naruto < Faker::Base
  def self.character; end
  def self.demon; end
  def self.eye; end
  def self.village; end
end
class Faker::JapaneseMedia::OnePiece < Faker::Base
  def self.akuma_no_mi; end
  def self.character; end
  def self.island; end
  def self.location; end
  def self.quote; end
  def self.sea; end
end
class Faker::JapaneseMedia::StudioGhibli < Faker::Base
  def self.character; end
  def self.movie; end
  def self.quote; end
end
class Faker::JapaneseMedia::SwordArtOnline < Faker::Base
  def self.game_name; end
  def self.item; end
  def self.location; end
  def self.real_name; end
end
class Faker::Australia < Faker::Base
  def self.animal; end
  def self.location; end
  def self.state; end
end
class Faker::Movies
end
class Faker::Movies::BackToTheFuture < Faker::Base
  def self.character; end
  def self.date; end
  def self.quote; end
end
class Faker::Movies::Departed < Faker::Base
  def self.actor; end
  def self.character; end
  def self.quote; end
end
class Faker::Movies::Ghostbusters < Faker::Base
  def self.actor; end
  def self.character; end
  def self.quote; end
end
class Faker::Movies::HarryPotter < Faker::Base
  def self.book; end
  def self.character; end
  def self.house; end
  def self.location; end
  def self.quote; end
  def self.spell; end
end
class Faker::Movies::HitchhikersGuideToTheGalaxy < Faker::Base
  def self.character; end
  def self.location; end
  def self.marvin_quote; end
  def self.planet; end
  def self.quote; end
  def self.specie; end
  def self.starship; end
end
class Faker::Movies::Hobbit < Faker::Base
  def self.character; end
  def self.location; end
  def self.quote; end
  def self.thorins_company; end
end
class Faker::Movies::HowToTrainYourDragon < Faker::Base
  def self.character; end
  def self.dragon; end
  def self.location; end
end
class Faker::Movies::Lebowski < Faker::Base
  def self.actor; end
  def self.character; end
  def self.quote; end
end
class Faker::Movies::LordOfTheRings < Faker::Base
  def self.character; end
  def self.location; end
  def self.quote; end
end
class Faker::Movie < Faker::Base
  def self.quote; end
  def self.title; end
end
class Faker::Movies::PrincessBride < Faker::Base
  def self.character; end
  def self.quote; end
end
class Faker::Movies::TheRoom < Faker::Base
  def self.actor; end
  def self.character; end
  def self.location; end
  def self.quote; end
end
class Faker::Movies::StarWars < Faker::Base
  def self.call_number; end
  def self.call_numbers; end
  def self.call_sign; end
  def self.call_squadron; end
  def self.call_squadrons; end
  def self.character; end
  def self.characters; end
  def self.droid; end
  def self.droids; end
  def self.planet; end
  def self.planets; end
  def self.quote(legacy_character = nil, character: nil); end
  def self.specie; end
  def self.species; end
  def self.vehicle; end
  def self.vehicles; end
  def self.wookie_sentence; end
  def self.wookie_words; end
  def self.wookiee_sentence; end
  def self.wookiee_words; end
end
class Faker::Movies::Tron < Faker::Base
  def self.character; end
  def self.characters; end
  def self.game; end
  def self.games; end
  def self.location; end
  def self.locations; end
  def self.program; end
  def self.programs; end
  def self.quote(character: nil); end
  def self.tagline; end
  def self.taglines; end
  def self.user; end
  def self.users; end
  def self.vehicle; end
  def self.vehicles; end
end
class Faker::Movies::VForVendetta < Faker::Base
  def self.character; end
  def self.quote; end
  def self.speech; end
end
class Faker::Music < Faker::Base
  def self.album; end
  def self.band; end
  def self.chord; end
  def self.chord_types; end
  def self.genre; end
  def self.instrument; end
  def self.key; end
  def self.key_types; end
  def self.key_variants; end
  def self.keys; end
  def self.mambo_no_5; end
end
class Faker::Music::GratefulDead < Faker::Base
  def self.player; end
  def self.song; end
end
class Faker::Music::Hiphop < Faker::Base
  def self.artist; end
  def self.groups; end
  def self.subgenres; end
end
class Faker::Music::Opera < Faker::Base
  def self.beethoven; end
  def self.bellini; end
  def self.berg; end
  def self.berlioz; end
  def self.bizet; end
  def self.donizetti; end
  def self.gluck; end
  def self.gluck_french; end
  def self.gluck_italian; end
  def self.gounod; end
  def self.mozart; end
  def self.mozart_german; end
  def self.mozart_italian; end
  def self.ravel; end
  def self.rossini; end
  def self.saint_saens; end
  def self.schubert; end
  def self.schumann; end
  def self.strauss; end
  def self.verdi; end
  def self.wagner; end
  def self.weber; end
end
class Faker::Music::PearlJam < Faker::Base
  def self.album; end
  def self.musician; end
  def self.song; end
end
class Faker::Music::Phish < Faker::Base
  def self.album; end
  def self.musician; end
  def self.song; end
end
class Faker::Music::Prince < Faker::Base
  def self.album; end
  def self.band; end
  def self.lyric; end
  def self.song; end
end
class Faker::Music::RockBand < Faker::Base
  def self.name; end
  def self.song; end
end
class Faker::Music::Rush < Faker::Base
  def self.album; end
  def self.player; end
end
class Faker::Show < Faker::Base
  def self.adult_musical; end
  def self.kids_musical; end
  def self.play; end
end
class Faker::Music::UmphreysMcgee < Faker::Base
  def self.song; end
end
class Faker::Quotes
end
class Faker::Quotes::Chiquito < Faker::Base
  def self.expression; end
  def self.expressions; end
  def self.joke; end
  def self.jokes; end
  def self.sentence; end
  def self.sentences; end
  def self.term; end
  def self.terms; end
end
class Faker::Quote < Faker::Base
  def self.famous_last_words; end
  def self.fortune_cookie; end
  def self.jack_handey; end
  def self.matz; end
  def self.most_interesting_man_in_the_world; end
  def self.robin; end
  def self.singular_siegler; end
  def self.yoda; end
end
class Faker::Quotes::Rajnikanth < Faker::Base
  def self.joke; end
end
class Faker::Quotes::Shakespeare < Faker::Base
  def self.as_you_like_it; end
  def self.as_you_like_it_quote; end
  def self.hamlet; end
  def self.hamlet_quote; end
  def self.king_richard_iii; end
  def self.king_richard_iii_quote; end
  def self.romeo_and_juliet; end
  def self.romeo_and_juliet_quote; end
end
class Faker::Religion::Bible < Faker::Base
  def self.character; end
  def self.location; end
  def self.quote; end
end
class Faker::Sports
end
class Faker::Sports::Basketball < Faker::Base
  def self.coach; end
  def self.player; end
  def self.position; end
  def self.team; end
end
class Faker::Sports::Football < Faker::Base
  def self.coach; end
  def self.competition; end
  def self.player; end
  def self.position; end
  def self.team; end
end
class Faker::Sports::Volleyball < Faker::Base
  def self.coach; end
  def self.formation; end
  def self.player; end
  def self.position; end
  def self.team; end
end
class Faker::TvShows
end
class Faker::TvShows::AquaTeenHungerForce < Faker::Base
  def self.character; end
  def self.quote; end
end
class Faker::TvShows::BigBangTheory < Faker::Base
  def self.character; end
  def self.quote; end
end
class Faker::TvShows::BojackHorseman < Faker::Base
  def self.character; end
  def self.quote; end
  def self.tongue_twister; end
end
class Faker::TvShows::BreakingBad < Faker::Base
  def self.character; end
  def self.episode; end
end
class Faker::TvShows::BrooklynNineNine < Faker::Base
  def self.character; end
  def self.quote; end
end
class Faker::TvShows::Buffy < Faker::Base
  def self.actor; end
  def self.big_bad; end
  def self.celebrity; end
  def self.character; end
  def self.episode; end
  def self.quote; end
end
class Faker::TvShows::Community < Faker::Base
  def self.characters; end
  def self.quotes; end
end
class Faker::TvShows::DrWho < Faker::Base
  def self.actor; end
  def self.catch_phrase; end
  def self.character; end
  def self.quote; end
  def self.specie; end
  def self.the_doctor; end
  def self.villain; end
  def self.villian; end
end
class Faker::TvShows::DumbAndDumber < Faker::Base
  def self.actor; end
  def self.character; end
  def self.quote; end
end
class Faker::TvShows::FamilyGuy < Faker::Base
  def self.character; end
  def self.location; end
  def self.quote; end
end
class Faker::TvShows::FinalSpace < Faker::Base
  def self.character; end
  def self.quote; end
  def self.vehicle; end
end
class Faker::TvShows::Friends < Faker::Base
  def self.character; end
  def self.location; end
  def self.quote; end
end
class Faker::TvShows::Futurama < Faker::Base
  def self.character; end
  def self.hermes_catchphrase; end
  def self.location; end
  def self.quote; end
end
class Faker::TvShows::GameOfThrones < Faker::Base
  def self.character; end
  def self.city; end
  def self.dragon; end
  def self.house; end
  def self.quote; end
end
class Faker::TvShows::HeyArnold < Faker::Base
  def self.character; end
  def self.location; end
  def self.quote; end
end
class Faker::TvShows::HowIMetYourMother < Faker::Base
  def self.catch_phrase; end
  def self.character; end
  def self.high_five; end
  def self.quote; end
end
class Faker::TvShows::MichaelScott < Faker::Base
  def self.quote; end
end
class Faker::TvShows::NewGirl < Faker::Base
  def self.character; end
  def self.quote; end
end
class Faker::TvShows::ParksAndRec < Faker::Base
  def self.character; end
  def self.city; end
end
class Faker::TvShows::RickAndMorty < Faker::Base
  def self.character; end
  def self.location; end
  def self.quote; end
end
class Faker::TvShows::RuPaul < Faker::Base
  def self.queen; end
  def self.quote; end
end
class Faker::TvShows::Seinfeld < Faker::Base
  def self.business; end
  def self.character; end
  def self.quote; end
end
class Faker::TvShows::SiliconValley < Faker::Base
  def self.app; end
  def self.character; end
  def self.company; end
  def self.email; end
  def self.invention; end
  def self.motto; end
  def self.quote; end
  def self.url; end
end
class Faker::TvShows::Simpsons < Faker::Base
  def self.character; end
  def self.episode_title; end
  def self.location; end
  def self.quote; end
end
class Faker::TvShows::SouthPark < Faker::Base
  def self.character; end
  def self.quote; end
end
class Faker::TvShows::StarTrek < Faker::Base
  def self.character; end
  def self.location; end
  def self.specie; end
  def self.villain; end
end
class Faker::TvShows::Stargate < Faker::Base
  def self.character; end
  def self.planet; end
  def self.quote; end
end
class Faker::TvShows::StrangerThings < Faker::Base
  def self.character; end
  def self.quote; end
end
class Faker::TvShows::Suits < Faker::Base
  def self.character; end
  def self.quote; end
end
class Faker::TvShows::Supernatural < Faker::Base
  def self.character; end
  def self.creature; end
  def self.weapon; end
end
class Faker::TvShows::TheExpanse < Faker::Base
  def self.character; end
  def self.location; end
  def self.quote; end
  def self.ship; end
end
class Faker::TvShows::TheFreshPrinceOfBelAir < Faker::Base
  def self.actor; end
  def self.celebrity; end
  def self.character; end
  def self.quote; end
end
class Faker::TvShows::TheITCrowd < Faker::Base
  def self.actor; end
  def self.character; end
  def self.email; end
  def self.quote; end
end
class Faker::TvShows::TheOffice < Faker::Base
  def self.character; end
  def self.quote; end
end
class Faker::TvShows::TheThickOfIt < Faker::Base
  def self.character; end
  def self.department; end
  def self.position; end
end
class Faker::TvShows::TwinPeaks < Faker::Base
  def self.character; end
  def self.location; end
  def self.quote; end
end
class Faker::TvShows::VentureBros < Faker::Base
  def self.character; end
  def self.organization; end
  def self.quote; end
  def self.vehicle; end
end
module Faker::Config
  def self.locale; end
  def self.locale=(arg0); end
  def self.own_locale; end
  def self.random; end
  def self.random=(arg0); end
end
class Faker::Base
  def self.bothify(string); end
  def self.disable_enforce_available_locales; end
  def self.fetch(key); end
  def self.fetch_all(key); end
  def self.flexible(key); end
  def self.letterify(letter_string); end
  def self.method_missing(mth, *args, &block); end
  def self.numerify(number_string, leading_zero: nil); end
  def self.parse(key); end
  def self.parse_caller(at); end
  def self.rand(max = nil); end
  def self.rand_in_range(from, to); end
  def self.regexify(reg); end
  def self.resolve(value); end
  def self.respond_to_missing?(method_name, include_private = nil); end
  def self.sample(list, num = nil); end
  def self.shuffle(list); end
  def self.translate(*args, **opts); end
  def self.unique(max_retries = nil); end
  def self.warn_for_deprecated_arguments; end
  def self.warn_with_uplevel(message, uplevel: nil); end
  def self.with_locale(tmp_locale = nil, &block); end
end
